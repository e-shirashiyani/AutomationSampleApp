name: Build and Upload to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Ruby environment
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Use the Ruby version that matches your project
          bundler-cache: true

      # Step 3: Install dependencies (Fastlane, CocoaPods, etc.)
      - name: Install dependencies
        run: |
          gem install bundler:2.5.21
          bundle install --jobs 4 --retry 3

      # Step 4: Cache CocoaPods dependencies
      - name: Cache CocoaPods
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # Step 5: Set up Fastlane match to handle code signing
      - name: Fetch certificates and provisioning profiles using Fastlane Match
        run: bundle exec fastlane match appstore --verbose
        env:
         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} # Password to unlock the repository or encrypted files
         MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}  # The Git URL to fetch the provisioning profiles and certificates
  
      # Step 6: Build and Upload to TestFlight with verbose logging
      - name: Build and Upload to TestFlight
        run: bundle exec fastlane build_and_upload --verbose
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }} # API key for App Store Connect
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }} # Apple ID email for Fastlane
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }} # App-specific password for Apple ID
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} # Password to decrypt certificates and provisioning profiles

      # Step 7: Save Xcode build logs
      - name: Upload Xcode Logs
        if: failure() # Upload logs only if the build fails
        uses: actions/upload-artifact@v3
        with:
          name: xcode-build-logs
          path: ~/Library/Logs/gym/*.log
