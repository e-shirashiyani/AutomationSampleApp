name: Build and Upload to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Ruby environment and cache gems
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      # Step 3: Install dependencies (Fastlane, CocoaPods, etc.)
      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3

      # Step 4: Cache CocoaPods dependencies
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # Step 5: Fetch certificates and provisioning profiles using Fastlane Match with retry logic
      - name: Fetch certificates and provisioning profiles using Fastlane Match
        run: |
          for i in {1..3}; do
            bundle exec fastlane match appstore --verbose && break
            echo "Retrying in 30 seconds... ($i/3)"
            sleep 30
          done
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

      # Step 6: Build and Upload to TestFlight
      - name: Build and Upload to TestFlight
        run: bundle exec fastlane build_and_upload --verbose
        env:
          APP_STORE_CONNECT_API_KEY: |
            {
              "key_id": "${{ secrets.KEY_ID }}",
              "issuer_id": "${{ secrets.ISSUER_ID }}",
              "key": "${{ secrets.API_PRIVATE_KEY }}"
            }
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Step 7: Upload Xcode Logs if there's a failure
      - name: Upload Xcode Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: xcode-build-logs
          path: ~/Library/Logs/gym/*.log
